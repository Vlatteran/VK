import abc
from abc import ABC, abstractmethod
from asyncio import Task
from typing import AsyncIterable, Coroutine
from vkpybot.events import EventHandler as EventHandler, EventType as EventType
from vkpybot.session import GroupSession as GroupSession, Session
from vkpybot.types import Message as Message

class EventServer(ABC, metaclass=abc.ABCMeta):
    vk_session: GroupSession
    listeners: list[EventHandler]
    tasks: list[Task]
    def __init__(self, vk_session: GroupSession) -> None: ...
    def create_task(self, coroutine: Coroutine): ...
    def bind_listener(self, listener: EventHandler): ...
    def notify_listeners(self, event: dict): ...
    async def parse_event(self, event) -> tuple[EventType, dict]: ...
    @abstractmethod
    def listen(self): ...

class CallBackServer(EventServer):
    host: str
    port: str
    app: Incomplete
    def __init__(self, vk_session: GroupSession, host: str = ..., port: int = ...) -> None: ...
    def listen(self) -> None: ...

class YandexCloudFunction(EventServer):
    handler: Incomplete
    def __init__(self, vk_session: GroupSession) -> None: ...
    def listen(self) -> None: ...

class LongPollServer(EventServer):
    server: Incomplete
    key: Incomplete
    ts: Incomplete
    def __init__(self, vk_session: GroupSession, server: str, key: str, ts: int) -> None: ...
    async def check(self) -> AsyncIterable[dict]: ...
    def listen(self) -> None: ...
